annoU <- sprintf("'U-CLL: N = %s, coefficient = %1.2f,'~italic(P)~'= %s'", nrow(LDT.U), corRes.U$estimate,formatNum(corRes.U$p.value, digits = 1, format = "e"))
corPlot.IGHV <- ggplot(LDT, aes(x = F4, y = doubling.time/30, fill = IGHV, col = IGHV)) +
geom_point(shape=21, size=3, col = "black") +
geom_smooth(method = "lm", se=FALSE, linetype ="dashed" ) +
annotate("text", x = Inf, y = Inf, label = annoM,
hjust=1.05, vjust =1.2, size = 5, parse = TRUE, color = colList[1]) +
annotate("text", x = Inf, y = Inf, label = annoU,
hjust=1.05, vjust =2.5, size = 5, parse = TRUE, color = colList[2]) +
ylab("doubling time (months)") + ggtitle("Lymphocyte doubling time") +
scale_fill_manual(values = c(M = colList[1],U=colList[2])) +
scale_color_manual(values = c(M = colList[1],U=colList[2])) +
scale_y_log10() +
theme_full + theme(legend.position = "none")
corPlot.IGHV
LDT.untreat <- doublingTime %>% mutate(F4 = facTab[match(patID, facTab$sample),]$value,
pretreat = demographic[match(patID, demographic$patientID),]$pretreat) %>%
filter(!is.na(F4),!is.na(pretreat)) %>% filter(pretreat == 0)
corRes <- cor.test(LDT.untreat$doubling.time, LDT.untreat$F4)
annoText <- sprintf("'coefficient = %1.2f, '~italic(P)~'= %s'",corRes$estimate,formatNum(corRes$p.value, digits = 1, format = "e"))
corPlot.untreat <- ggplot(LDT.untreat, aes(x = F4, y = doubling.time/30)) +
geom_point(fill =colList[5], shape=21, size=3) +
geom_smooth(method = "lm", se=FALSE, color = "grey50", linetype ="dashed" ) +
annotate("text", x = 2.2, y = Inf, label = annoText,
hjust=1, vjust =2, size = 5, parse = TRUE, col= colList[1]) +
ylab("doubling time (months)") + ggtitle(sprintf("Lymphocyte doubling time\n(untreated patients only, n=%s)",nrow(LDT.untreat))) +
scale_y_log10() +
theme_full
corPlot.untreat
onlyIGHV <- summary(lm(log2(doubling.time) ~ IGHV, data = LDT))
onlyF4 <- summary(lm(log2(doubling.time) ~ F4, data = LDT))
combined <- summary(lm(log2(doubling.time) ~ F4 + IGHV, data = LDT))
plotTab <- tibble(model = c("IGHV only","F4 only", "IGHV + F4"),
R2 = c(onlyIGHV$adj.r.squared, onlyF4$r.squared, combined$adj.r.squared)) %>%
mutate(model = factor(model, levels = model))
explainedDT <- ggplot(plotTab, aes(x=model, y = R2)) + geom_bar(stat = "identity", aes(fill = model), width = 0.8) +
coord_flip(expand = FALSE, xlim = c(0.5,3.5)) + theme_half + scale_fill_manual(values = colList) +
geom_text(aes(x = model, y =0.01, label = model), hjust =0, fontface = "bold", size =5) +
theme(axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "none",
axis.title.y = element_text( size =13)) +
xlab("Predictors") + ylab("Varianced explained")
explainedDT
batchTab <- filter(allFactors , factor == "F3") %>%
mutate(batch = rna[,match(sample,colnames(rna))]$batch) %>%
filter(!is.na(batch)) %>%
mutate(batch = paste0("batch", batch+1))
pval <- car::Anova(lm(value ~ factor(batch), batchTab))$`Pr(>F)`[1]
pval <- formatNum(pval, digits = 2)
pAnno <- bquote(italic("P")~"="~.(pval))
colListNew <- colList[-4]
pL3 <- ggplot(batchTab, aes(x=batch, y = value, col = batch)) +
geom_boxplot() +
ggbeeswarm::geom_beeswarm() +
scale_color_manual(values = colListNew) +
annotate("text", x=Inf, y=Inf, label=pAnno, hjust=1.5, vjust=1.5)+
theme_full +
theme(legend.position = "none") +
ylab("F3 value") + xlab("") + ggtitle("F3 ~ RNAseq batch")
pL3
rna <- estimateSizeFactors(rna)
exprTab <- counts(rna[rowData(rna)$symbol %in% c("CD4","CD8A"),],normalized = TRUE) %>%
t() %>% as_tibble(rownames = "sample") %>%
pivot_longer(-sample, names_to="id", values_to = "count") %>%
mutate(symbol = rowData(rna)[id,]$symbol)
facTab <- filter(allFactors , factor == "F5")
plotTab <- left_join(exprTab, facTab, by = "sample")
pAnno <- bquote(italic("P")~"<"~.(10e-13))
pL5 <- ggplot(plotTab, aes(y=log2(count), x= value, col = symbol)) +
geom_point() + geom_smooth(method = "lm", se = FALSE) +
theme_half +
scale_color_manual(values = colList) +
annotate("text", x=-Inf, y=Inf, label=pAnno, hjust=-0.5, vjust=5)+
xlab("F5 value") + ylab(bquote("log"[2]*"(RNAseq count)")) +
ggtitle("T cell marker expressions ~ F5") +
theme(legend.position = c(0.8,0.2)) +
ylim(0,13)
fsea.results <- MOFA::runEnrichmentAnalysis(MOFAobject,view = "mRNA", factor =6 , feature.sets = reactomeGS)
enL6 <- MOFA::plotEnrichment(MOFAobject, fsea.results, factor = 6, max.pathways = 5) +
ggtitle("Pathways enriched for F6") + theme_half
exprTab <- counts(rna[rowData(rna)$symbol %in% c("SOD1","GPX4"),],normalized = TRUE) %>%
t() %>% as_tibble(rownames = "sample") %>%
pivot_longer(-sample, names_to="id", values_to = "count") %>%
mutate(symbol = rowData(rna)[id,]$symbol)
facTab <- filter(allFactors , factor == "F6")
plotTab <- left_join(exprTab, facTab, by = "sample")
p1 <- cor.test(~ value + log2(count), filter(plotTab, symbol == "SOD1"))
p2 <- cor.test(~ value + log2(count), filter(plotTab, symbol == "GPX4"))
pAnno <- bquote(italic("P")~"<"~.(10e-13))
corL6 <- ggplot(plotTab, aes(y=log2(count), x= value, col = symbol)) +
geom_point() + geom_smooth(method = "lm", se = FALSE) +
theme_half +
scale_color_manual(values = colList) +
annotate("text", x=-Inf, y=Inf, label=pAnno, hjust=-0.5, vjust=5)+
xlab("F6 value") + ylab(bquote("log"[2]*"(RNAseq count)")) +
ggtitle("SOD1 and GPX4 ~ F6") +
theme(legend.position = c(0.8,0.2))
#corL6 + scale_y_continuous(limits = c(10,NA), expand = c(0,0),
#                     breaks = c(10, 11:15), labels = c(0, 11:15)) +
#  theme(axis.line.y = element_blank()) +
#  annotate(geom = "segment", x = -Inf, xend = -Inf, y = -Inf, yend = Inf) +
# annotate(geom = "segment", x = -Inf, xend = -Inf, y =  3.5, yend = 4,
#          linetype = "dashed", color = "white")
fsea.results <- MOFA::runEnrichmentAnalysis(MOFAobject,view = "mRNA", factor =7 , feature.sets = reactomeGS)
enL7 <- MOFA::plotEnrichment(MOFAobject, fsea.results, factor = 7, max.pathways = 5) +
ggtitle("Pathways enriched for F7") + theme_half
plotTitle <- ggdraw() +draw_figure_label("Figure 1", fontface = "bold", position = "top.left",size=20)
topGrid <- plot_grid(varExpPlot, haPlot, haTTT, haOS, nrow =1,
rel_widths = c(1,0.9,1,1), labels = c("a","b","e","f"), label_size = 20,
align = "h", axis = "l")
bottomGrid <- plot_grid(plotList[["TTT"]],plotList[["OS"]],NULL,
plot_grid(corPlot,explainedDT, rel_heights = c(0.70,0.30), ncol =1, labels = c("g","h"),label_size = 20, align = "v", axis = "l"),
nrow =1, rel_widths = c(1,1,0.02,0.85), labels = c("c","d"), label_size = 20)
plot_grid(plotTitle, topGrid, NULL, bottomGrid, rel_heights = c(0.02,0.45,0.02,0.5), ncol = 1)
R2list <- calculateVarianceExplained(MOFAobject)
plotTab <- R2list$R2PerFactor %>%
as_tibble(rownames = "factor") %>%
pivot_longer(-factor, names_to = "view", values_to = "R2") %>%
mutate(factor = str_replace(factor,"LF","F"))
p <- ggplot(plotTab, aes_string(x = "view", y = "R2")) +
geom_point(size = 2) +
geom_segment(aes_string(xend = "view"), size = 0.75,yend = 0) +
expand_limits(y=0) +
coord_flip() +
facet_wrap(~factor, scale = "free_x") +
xlab("") + ylab(bquote('Variance explained ('~R^2~')')) +
theme_full +
theme(strip.text = element_text(size =15))
p
plot_grid(plot_grid(loadLF1, loadLF2, violinLF1_Meth,
nrow =3, align = "hv", axis = "l", labels = c("a","b","c"), label_size = 20),
NULL,
plot_grid(pcaLF1,NULL, nrow=2, rel_heights  = c(0.8,0.2)),
nrow = 1, rel_widths = c(0.4,.02, 0.6), labels = c("","","c"), label_size = 20)
grid.arrange(grobs = c(tttList, osList), ncol =2)
plot_grid(corPlot.untreat, NULL,corPlot.IGHV, nrow =1, rel_widths = c(1,0.1,1))
plot_grid(plotAge, NULL,plotSex, NULL, plotTreat,ncol=1, rel_heights  = c(1,0.1,1,0.1,1))
plot_grid(plot_grid(kmTTT.untreat, haTTT.untreat, nrow =2, align = "h", axis = "l", rel_heights = c(0.55,0.45)), NULL,
plot_grid(kmOS.untreat, haOS.untreat, nrow =2, align = "h", axis = "l", rel_heights = c(0.55,0.45)), nrow=1, rel_widths = c(1,0.1,1) )
p <- plot_grid(plot_grid(pL3, pL5, corL6, nrow=1, rel_widths = c(1,0.8,0.8), labels = c("A","B","D"), label_size = 20),
plot_grid(enL6, enL7, nrow=1, labels = c("C","E"), label_size = 20, rel_widths = c(0.5,0.6)),nrow=2)
p
data("drug","gene","rna")
source("../../R/utils_vignettes.R")
library(mofaCLL)
library(reticulate)
library(DESeq2)
library(sva)
library(MultiAssayExperiment)
library(MOFA)
library(tidyverse)
options(stringsAsFactors=FALSE)
#set the global ggplot theme
theme_set(theme_bw() + theme(axis.text = element_text(size=12),
axis.title = element_text(size=14),
plot.title = element_text(size = 15, hjust =0.5, face="bold")))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, dev = c("png","pdf"))
library(limma)
library(pheatmap)
library(jyluMisc)
library(survival)
library(survminer)
library(maxstat)
library(glmnet)
library(SummarizedExperiment)
library(cowplot)
library(tidyverse)
load("../data/patMeta_enc.RData")
load("../data/ddsrna_enc.RData")
load("../data/proteomic_explore_enc.RData")
load("../output/deResList.RData") #precalculated differential expression
load("../data/survival_enc.RData")
load("../data/screenData_enc.RData")
#protCLL <- protCLL[rowData(protCLL)$uniqueMap,]
source("../code/utils.R")
screenSub <- screenData %>% filter(patientID %in% colnames(protCLL),
Drug %in% c("Duvelisib")) %>%
group_by(patientID, Drug) %>% summarise(viab = mean(normVal.cor_auc)) %>%
mutate(trisomy12 = patMeta[match(patientID, patMeta$Patient.ID),]$trisomy12,
IGHV = patMeta[match(patientID, patMeta$Patient.ID),]$IGHV.status) %>%
mutate(status = ifelse(trisomy12==1,"trisomy12","WT"),
IGHV = ifelse(IGHV=="M","M-CLL","U-CLL"),
Drug = as.character(Drug))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, dev = c("png","pdf"))
library(limma)
library(pheatmap)
library(jyluMisc)
library(survival)
library(survminer)
library(maxstat)
library(glmnet)
library(SummarizedExperiment)
library(cowplot)
library(tidyverse)
load("../data/patMeta_enc.RData")
load("../data/pheno1000_enc.RData")
load("../data/survival_enc.RData")
load("../data/proteomic_LUMOS_enc.RData") #using the LUMOS data
protCLL$trisomy12 <- patMeta[match(colnames(protCLL),patMeta$Patient.ID),]$trisomy12
protCLL <- protCLL[rowData(protCLL)$uniqueMap,]
source("../code/utils.R")
protCLL.sub <- protCLL[!rowData(protCLL)$chromosome_name %in% c("X","Y"),]
protMat <- assays(protCLL.sub)[["count"]]
survTab <- survT %>% filter(patID %in% colnames(protCLL)) %>%
select(patID, OS, died, TTT, treatedAfter) %>%
dplyr::rename(patientID = patID)
uniRes.ttt <- lapply(rownames(protMat), function(n) {
testTab <- mutate(survTab, expr = protMat[n, patientID])
com(testTab$expr, testTab$TTT, testTab$treatedAfter, TRUE) %>%
mutate(id = n)
}) %>% bind_rows() %>% mutate(p.adj = p.adjust(p, method = "BH")) %>%
arrange(p) %>% mutate(name = rowData(protCLL[id,])$hgnc_symbol) %>%
mutate(outcome = "TTT")
uniRes.os <- lapply(rownames(protMat), function(n) {
testTab <- mutate(survTab, expr = protMat[n, patientID])
com(testTab$expr, testTab$OS, testTab$died, TRUE) %>%
mutate(id = n)
}) %>% bind_rows() %>% mutate(p.adj = p.adjust(p, method = "BH")) %>%
arrange(p) %>% mutate(name = rowData(protCLL[id,])$hgnc_symbol) %>%
mutate(outcome = "OS")
uniRes <- bind_rows(uniRes.ttt, uniRes.os) %>%
mutate(p.adj = p.adjust(p, method = "BH"))
uniRes %>% filter(p.adj < 0.1) %>% mutate_if(is.numeric, formatC, digits=2,format="e") %>%
select(name, p, HR, p.adj, outcome) %>% DT::datatable()
#table of known risks
riskTab <- select(survTab, patientID) %>%
left_join(patMeta[,c("Patient.ID","IGHV.status","TP53","trisomy12","del17p","gender")], by = c(patientID = "Patient.ID")) %>%
mutate(TP53 = as.numeric(as.character(TP53)),
del17p = as.numeric(as.character(del17p))) %>%
mutate(`TP53.del17p` = as.numeric(TP53 | del17p),
IGHV = factor(ifelse(IGHV.status %in% "U",1,0))) %>%
select(-TP53, -del17p,-IGHV.status) %>%
mutate_if(is.numeric, as.factor) %>%
dplyr::rename(sex=gender) %>%
mutate(age = survT[match(patientID, survT$patID),]$age) %>%
mutate(age = age/10)
cTab.ttt <- lapply(filter(uniRes, outcome == "TTT", p.adj <=0.1)$id, function(n) {
risk0 <- riskTab
expr <- protMat[n,]
expr <- (expr - mean(expr,na.rm=TRUE))/sd(expr,na.rm = TRUE)
risk1 <- riskTab %>% mutate(protExpr = expr[patientID])
res0 <- summary(runCox(survTab, risk0, "TTT","treatedAfter"))
fullModel <- runCox(survTab, risk1, "TTT","treatedAfter")
res1 <- summary(fullModel)
tibble(id = n, c0 = res0$concordance[1], c1 = res1$concordance[1],
se0 = res0$concordance[2],se1 = res1$concordance[2],
ci0 = se0*1.96, ci1 = se1*1.96,
p = res1$coefficients["protExpr",5],
fullModel = list(fullModel))
}) %>% bind_rows() %>% mutate(diffC = c1-c0) %>%
arrange(desc(diffC)) %>%
mutate(name=rowData(protCLL[id,])$hgnc_symbol,
outcome = "TTT")
cTab.os <- lapply(filter(uniRes, outcome == "OS", p.adj<=0.1)$id, function(n) {
risk0 <- riskTab
expr <- protMat[n,]
expr <- (expr - mean(expr,na.rm=TRUE))/sd(expr,na.rm = TRUE)
risk1 <- riskTab %>% mutate(protExpr = expr[patientID])
res0 <- summary(runCox(survTab, risk0, "OS","died"))
fullModel <- runCox(survTab, risk1, "OS","died")
res1 <- summary(fullModel)
tibble(id = n, c0 = res0$concordance[1], c1 = res1$concordance[1],
se0 = res0$concordance[2],se1 = res1$concordance[2],
ci0 = se0*1.96, ci1 = se1*1.96,
p = res1$coefficients["protExpr",5],
fullModel = list(fullModel))
}) %>% bind_rows() %>% mutate(diffC = c1-c0) %>%
arrange(desc(diffC)) %>%
mutate(name=rowData(protCLL[id,])$hgnc_symbol,
outcome = "OS")
cTab <- bind_rows(cTab.ttt, cTab.os) %>%
mutate(p.adj = p.adjust(p, method = "BH")) %>%
arrange(p)
cTab %>% filter(p.adj < 0.1) %>% mutate_if(is.numeric, formatC, digits=2,format="e") %>%
select(name, p, p.adj, outcome) %>% DT::datatable()
plotHazard <- function(survRes, protName, title = "") {
sumTab <- summary(survRes)$coefficients
confTab <- summary(survRes)$conf.int
#correct feature name
nameOri <- rownames(sumTab)
nameMod <- substr(nameOri, 1, nchar(nameOri) -1)
plotTab <- tibble(feature = rownames(sumTab),
nameMod = substr(nameOri, 1, nchar(nameOri) -1),
HR = sumTab[,2],
p = sumTab[,5],
Upper = confTab[,4],
Lower = confTab[,3]) %>%
mutate(feature = ifelse(nameMod %in% names(survRes$xlevels), nameMod, feature)) %>%
mutate(feature = str_replace(feature, "[.]","/")) %>%
mutate(feature = str_replace(feature, "[_]","-")) %>%
mutate(feature = str_replace(feature, "IGHV","IGHV-U")) %>%
mutate(candidate = ifelse(feature == "protExpr", "yes","no")) %>%
mutate(feature = ifelse(feature == "protExpr", protName, feature)) %>%
#arrange(desc(abs(p))) %>%
mutate(feature = factor(feature, levels = feature)) #%>%
#mutate(type = ifelse(HR >1 ,"up","down")) %>%
# mutate(Upper = ifelse(Upper > 10, 10, Upper))
p <- ggplot(plotTab, aes(x=feature, y = HR, color = candidate)) +
geom_hline(yintercept = 1, linetype = "dotted") +
geom_point(position = position_dodge(width=0.8), size=3) +
geom_errorbar(aes(ymin = Lower, ymax = Upper), width = 0.3, size=1) +
geom_text(position = position_nudge(x = 0.3),
aes(y = HR, label =  sprintf("italic(P)~'='~'%s'",
formatNum(p, digits = 1))),
color = "black", size =5, parse = TRUE) +
#expand_limits(y=c(-0.5,0))+
scale_color_manual(values = c(yes = "darkred", no = "black")) +
ggtitle(title) + scale_y_log10() +
ylab("Hazard ratio") +
coord_flip() +
theme_full +
theme(legend.position = "none", axis.title.y = element_blank())
return(p)
}
protName <- "PRMT5"
outcomeName <- "TTT"
survRes <- filter(cTab, outcome == outcomeName , name == protName)$fullModel[[1]]
hr.prmt5 <- plotHazard(survRes, protName, outcomeName)
hr.prmt5
#table of known risks
riskTab <- select(survTab, patientID) %>%
left_join(patMeta[,c("Patient.ID","IGHV.status","TP53","trisomy12","del17p","gender")], by = c(patientID = "Patient.ID")) %>%
mutate(TP53 = as.numeric(as.character(TP53)),
del17p = as.numeric(as.character(del17p))) %>%
mutate(`TP53.del17p` = as.numeric(TP53 | del17p),
IGHV = factor(ifelse(IGHV.status %in% "U",1,0))) %>%
select(-TP53, -del17p,-IGHV.status) %>%
mutate_if(is.numeric, as.factor) %>%
dplyr::rename(sex=gender) %>%
mutate(age = survT[match(patientID, survT$patID),]$age) %>%
mutate(age = age/10) %>%
select(IGHV, `TP53.del17p`, trisomy12, sex, age)
cTab.ttt <- lapply(filter(uniRes, outcome == "TTT", p.adj <=0.1)$id, function(n) {
risk0 <- riskTab
expr <- protMat[n,]
expr <- (expr - mean(expr,na.rm=TRUE))/sd(expr,na.rm = TRUE)
risk1 <- riskTab %>% mutate(protExpr = expr[patientID])
res0 <- summary(runCox(survTab, risk0, "TTT","treatedAfter"))
fullModel <- runCox(survTab, risk1, "TTT","treatedAfter")
res1 <- summary(fullModel)
tibble(id = n, c0 = res0$concordance[1], c1 = res1$concordance[1],
se0 = res0$concordance[2],se1 = res1$concordance[2],
ci0 = se0*1.96, ci1 = se1*1.96,
p = res1$coefficients["protExpr",5],
fullModel = list(fullModel))
}) %>% bind_rows() %>% mutate(diffC = c1-c0) %>%
arrange(desc(diffC)) %>%
mutate(name=rowData(protCLL[id,])$hgnc_symbol,
outcome = "TTT")
#table of known risks
riskTab <- select(survTab, patientID) %>%
left_join(patMeta[,c("Patient.ID","IGHV.status","TP53","trisomy12","del17p","gender")], by = c(patientID = "Patient.ID")) %>%
mutate(TP53 = as.numeric(as.character(TP53)),
del17p = as.numeric(as.character(del17p))) %>%
mutate(`TP53.del17p` = as.numeric(TP53 | del17p),
IGHV = factor(ifelse(IGHV.status %in% "U",1,0))) %>%
select(-TP53, -del17p,-IGHV.status) %>%
mutate_if(is.numeric, as.factor) %>%
dplyr::rename(sex=gender) %>%
mutate(age = survT[match(patientID, survT$patID),]$age) %>%
mutate(age = age/10) %>%
select(IGHV, `TP53.del17p`, trisomy12, sex, age)
#table of known risks
riskTab <- select(survTab, patientID) %>%
left_join(patMeta[,c("Patient.ID","IGHV.status","TP53","trisomy12","del17p","gender")], by = c(patientID = "Patient.ID")) %>%
mutate(TP53 = as.numeric(as.character(TP53)),
del17p = as.numeric(as.character(del17p))) %>%
mutate(`TP53.del17p` = as.numeric(TP53 | del17p),
IGHV = factor(ifelse(IGHV.status %in% "U",1,0))) %>%
select(-TP53, -del17p,-IGHV.status) %>%
mutate_if(is.numeric, as.factor) %>%
dplyr::rename(sex=gender) %>%
mutate(age = survT[match(patientID, survT$patID),]$age) %>%
mutate(age = age/10) %>%
select(patientID, IGHV, `TP53.del17p`, trisomy12, sex, age)
cTab.ttt <- lapply(filter(uniRes, outcome == "TTT", p.adj <=0.1)$id, function(n) {
risk0 <- riskTab
expr <- protMat[n,]
expr <- (expr - mean(expr,na.rm=TRUE))/sd(expr,na.rm = TRUE)
risk1 <- riskTab %>% mutate(protExpr = expr[patientID])
res0 <- summary(runCox(survTab, risk0, "TTT","treatedAfter"))
fullModel <- runCox(survTab, risk1, "TTT","treatedAfter")
res1 <- summary(fullModel)
tibble(id = n, c0 = res0$concordance[1], c1 = res1$concordance[1],
se0 = res0$concordance[2],se1 = res1$concordance[2],
ci0 = se0*1.96, ci1 = se1*1.96,
p = res1$coefficients["protExpr",5],
fullModel = list(fullModel))
}) %>% bind_rows() %>% mutate(diffC = c1-c0) %>%
arrange(desc(diffC)) %>%
mutate(name=rowData(protCLL[id,])$hgnc_symbol,
outcome = "TTT")
cTab.os <- lapply(filter(uniRes, outcome == "OS", p.adj<=0.1)$id, function(n) {
risk0 <- riskTab
expr <- protMat[n,]
expr <- (expr - mean(expr,na.rm=TRUE))/sd(expr,na.rm = TRUE)
risk1 <- riskTab %>% mutate(protExpr = expr[patientID])
res0 <- summary(runCox(survTab, risk0, "OS","died"))
fullModel <- runCox(survTab, risk1, "OS","died")
res1 <- summary(fullModel)
tibble(id = n, c0 = res0$concordance[1], c1 = res1$concordance[1],
se0 = res0$concordance[2],se1 = res1$concordance[2],
ci0 = se0*1.96, ci1 = se1*1.96,
p = res1$coefficients["protExpr",5],
fullModel = list(fullModel))
}) %>% bind_rows() %>% mutate(diffC = c1-c0) %>%
arrange(desc(diffC)) %>%
mutate(name=rowData(protCLL[id,])$hgnc_symbol,
outcome = "OS")
cTab <- bind_rows(cTab.ttt, cTab.os) %>%
mutate(p.adj = p.adjust(p, method = "BH")) %>%
arrange(p)
protName <- "PRMT5"
outcomeName <- "TTT"
survRes <- filter(cTab, outcome == outcomeName , name == protName)$fullModel[[1]]
hr.prmt5 <- plotHazard(survRes, protName, outcomeName)
hr.prmt5
#table of known risks
riskTab <- select(survTab, patientID) %>%
left_join(patMeta[,c("Patient.ID","IGHV.status","TP53","trisomy12","del17p","gender")], by = c(patientID = "Patient.ID")) %>%
mutate(TP53 = as.numeric(as.character(TP53)),
del17p = as.numeric(as.character(del17p))) %>%
mutate(`TP53.del17p` = as.numeric(TP53 | del17p),
IGHV = factor(ifelse(IGHV.status %in% "U",1,0))) %>%
select(-TP53, -del17p,-IGHV.status) %>%
mutate_if(is.numeric, as.factor) %>%
dplyr::rename(sex=gender) %>%
mutate(age = survT[match(patientID, survT$patID),]$age) %>%
mutate(age = age/10) %>%
select(patientID, sex, age, trisomy12,`TP53.del17p`, IGHV)
cTab.ttt <- lapply(filter(uniRes, outcome == "TTT", p.adj <=0.1)$id, function(n) {
risk0 <- riskTab
expr <- protMat[n,]
expr <- (expr - mean(expr,na.rm=TRUE))/sd(expr,na.rm = TRUE)
risk1 <- riskTab %>% mutate(protExpr = expr[patientID])
res0 <- summary(runCox(survTab, risk0, "TTT","treatedAfter"))
fullModel <- runCox(survTab, risk1, "TTT","treatedAfter")
res1 <- summary(fullModel)
tibble(id = n, c0 = res0$concordance[1], c1 = res1$concordance[1],
se0 = res0$concordance[2],se1 = res1$concordance[2],
ci0 = se0*1.96, ci1 = se1*1.96,
p = res1$coefficients["protExpr",5],
fullModel = list(fullModel))
}) %>% bind_rows() %>% mutate(diffC = c1-c0) %>%
arrange(desc(diffC)) %>%
mutate(name=rowData(protCLL[id,])$hgnc_symbol,
outcome = "TTT")
cTab.os <- lapply(filter(uniRes, outcome == "OS", p.adj<=0.1)$id, function(n) {
risk0 <- riskTab
expr <- protMat[n,]
expr <- (expr - mean(expr,na.rm=TRUE))/sd(expr,na.rm = TRUE)
risk1 <- riskTab %>% mutate(protExpr = expr[patientID])
res0 <- summary(runCox(survTab, risk0, "OS","died"))
fullModel <- runCox(survTab, risk1, "OS","died")
res1 <- summary(fullModel)
tibble(id = n, c0 = res0$concordance[1], c1 = res1$concordance[1],
se0 = res0$concordance[2],se1 = res1$concordance[2],
ci0 = se0*1.96, ci1 = se1*1.96,
p = res1$coefficients["protExpr",5],
fullModel = list(fullModel))
}) %>% bind_rows() %>% mutate(diffC = c1-c0) %>%
arrange(desc(diffC)) %>%
mutate(name=rowData(protCLL[id,])$hgnc_symbol,
outcome = "OS")
cTab <- bind_rows(cTab.ttt, cTab.os) %>%
mutate(p.adj = p.adjust(p, method = "BH")) %>%
arrange(p)
cTab %>% filter(p.adj < 0.1) %>% mutate_if(is.numeric, formatC, digits=2,format="e") %>%
select(name, p, p.adj, outcome) %>% DT::datatable()
plotHazard <- function(survRes, protName, title = "") {
sumTab <- summary(survRes)$coefficients
confTab <- summary(survRes)$conf.int
#correct feature name
nameOri <- rownames(sumTab)
nameMod <- substr(nameOri, 1, nchar(nameOri) -1)
plotTab <- tibble(feature = rownames(sumTab),
nameMod = substr(nameOri, 1, nchar(nameOri) -1),
HR = sumTab[,2],
p = sumTab[,5],
Upper = confTab[,4],
Lower = confTab[,3]) %>%
mutate(feature = ifelse(nameMod %in% names(survRes$xlevels), nameMod, feature)) %>%
mutate(feature = str_replace(feature, "[.]","/")) %>%
mutate(feature = str_replace(feature, "[_]","-")) %>%
mutate(feature = str_replace(feature, "IGHV","IGHV-U")) %>%
mutate(candidate = ifelse(feature == "protExpr", "yes","no")) %>%
mutate(feature = ifelse(feature == "protExpr", protName, feature)) %>%
#arrange(desc(abs(p))) %>%
mutate(feature = factor(feature, levels = feature)) #%>%
#mutate(type = ifelse(HR >1 ,"up","down")) %>%
# mutate(Upper = ifelse(Upper > 10, 10, Upper))
p <- ggplot(plotTab, aes(x=feature, y = HR, color = candidate)) +
geom_hline(yintercept = 1, linetype = "dotted") +
geom_point(position = position_dodge(width=0.8), size=3) +
geom_errorbar(aes(ymin = Lower, ymax = Upper), width = 0.3, size=1) +
geom_text(position = position_nudge(x = 0.3),
aes(y = HR, label =  sprintf("italic(P)~'='~'%s'",
formatNum(p, digits = 1))),
color = "black", size =5, parse = TRUE) +
#expand_limits(y=c(-0.5,0))+
scale_color_manual(values = c(yes = "darkred", no = "black")) +
ggtitle(title) + scale_y_log10() +
ylab("Hazard ratio") +
coord_flip() +
theme_full +
theme(legend.position = "none", axis.title.y = element_blank())
return(p)
}
protName <- "PRMT5"
outcomeName <- "TTT"
survRes <- filter(cTab, outcome == outcomeName , name == protName)$fullModel[[1]]
hr.prmt5 <- plotHazard(survRes, protName, outcomeName)
hr.prmt5
setwd("~/Workflows/CLLproteomics_publish/analysis")
