res <- cv.glmnet(X,y, type.measure = "mse", family="gaussian",
nfolds = folds, alpha = alpha, standardize = FALSE)
lambdaList <- c(lambdaList, res$lambda.min)
modelList[[i]] <- res
coefModel <- coef(res, s = "lambda.min")[-1] #remove intercept row
coefMat[,i] <- coefModel
#calculate variance explained
y.pred <- predict(res, s = "lambda.min", newx = X)
varExp <- 1-min(res$cvm)/res$cvm[1]
#varExp <- cor(as.vector(y),as.vector(y.pred))^2
varExplain[i] <- ifelse(is.na(varExp), 0, varExp)
} else {
fitlm<-lm(y~., data.frame(X))
varExp <- summary(fitlm)$r.squared
varExplain <- c(varExplain, varExp)
}
}
list(modelList = modelList, lambdaList = lambdaList, varExplain = varExplain, coefMat = coefMat)
}
set.seed(2021)
lassoResults <- list()
for (eachMeasure in names(cleanData$allResponse)) {
dataResult <- list()
for (eachDataset in names(cleanData$allExplain[[eachMeasure]])) {
y <- cleanData$allResponse[[eachMeasure]]
X <- cleanData$allExplain[[eachMeasure]][[eachDataset]]
glmRes <- runGlm(X, y, method = "lasso", repeats = 50, folds = 3)
dataResult[[eachDataset]] <- glmRes
}
lassoResults[[eachMeasure]] <- dataResult
}
plotVar <- function(glmResult) {
pList <- lapply(names(glmResult), function(n) {
plotTab <- lapply(names(glmResult[[n]]), function(x) {
tibble(variable = x, value = glmResult[[n]][[x]]$varExplain)}) %>%
bind_rows() %>% group_by(variable) %>%
summarise(mean=mean(value, na.rm = TRUE),sd=sd(value, na.rm=TRUE))
ggplot(plotTab,aes(x=variable, y=mean, fill= variable)) +
geom_bar(position=position_dodge(), stat="identity", width = 0.8, col="black") +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd, width = 0.3), position=position_dodge(.9)) +
theme_classic() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size =12),
plot.title = element_text(hjust =0.5),
axis.text.y = element_text(size=12),
axis.title = element_text(size=15),
legend.position = "none") +
scale_fill_brewer("Set1",type = "qual") + coord_cartesian(ylim = c(0,1)) +
ylab("R2") + xlab("") + ggtitle("")
})
pList
}
varList <- plotVar(lassoResults)
cowplot::plot_grid(plotlist = varList, ncol=1)
library(gtable)
lassoPlot <- function(lassoOut, cleanData, freqCut = 1, coefCut = 0.01, setNumber = "last", legend = TRUE, labSuffix = " protein expression", scaleFac =1) {
plotList <- list()
if (setNumber == "last") {
setNumber <- length(lassoOut[[1]])
} else {
setNumber <- setNumber
}
for (seaName in names(lassoOut)) {
#for the barplot on the left of the heatmap
barValue <- rowMeans(lassoOut[[seaName]][[setNumber]]$coefMat)
freqValue <- rowMeans(abs(sign(lassoOut[[seaName]][[setNumber]]$coefMat)))
barValue <- barValue[abs(barValue) >= coefCut & freqValue >= freqCut] # a certain threshold
barValue <- barValue[order(barValue)]
if(length(barValue) == 0) {
plotList[[seaName]] <- NA
next
}
#for the heatmap and scatter plot below the heatmap
allData <- cleanData$allExplain[[seaName]][[setNumber]]
seaValue <- cleanData$allResponse[[seaName]]*2 #back to Z-score
tabValue <- allData[, names(barValue),drop=FALSE]
ord <- order(seaValue)
seaValue <- seaValue[ord]
tabValue <- tabValue[ord, ,drop=FALSE]
sampleIDs <- rownames(tabValue)
tabValue <- as.tibble(tabValue)
#change scaled binary back to catagorical
for (eachCol in colnames(tabValue)) {
if (strsplit(eachCol, split = "[.]")[[1]][1] != "con") {
tabValue[[eachCol]] <- as.integer(as.factor(tabValue[[eachCol]]))
}
else {
tabValue[[eachCol]] <- tabValue[[eachCol]]*2 #back to Z-score
}
}
tabValue$Sample <- sampleIDs
#Mark different rows for different scaling in heatmap
matValue <- gather(tabValue, key = "Var",value = "Value", -Sample)
matValue$Type <- "mut"
#For continuious value
matValue$Type[grep("con.",matValue$Var)] <- "con"
#for methylation_cluster
matValue$Type[grep("ConsCluster",matValue$Var)] <- "meth"
#change the scale of the value, let them do not overlap with each other
matValue[matValue$Type == "mut",]$Value = matValue[matValue$Type == "mut",]$Value + 10
matValue[matValue$Type == "meth",]$Value = matValue[matValue$Type == "meth",]$Value + 20
#color scale for viability
idx <- matValue$Type == "con"
myCol <- colorRampPalette(c(colList[2],'white',colList[1]),
space = "Lab")
if (sum(idx) != 0) {
matValue[idx,]$Value = round(matValue[idx,]$Value,digits = 2)
minViab <- min(matValue[idx,]$Value)
maxViab <- max(matValue[idx,]$Value)
limViab <- max(c(abs(minViab), abs(maxViab)))
scaleSeq1 <- round(seq(-limViab, limViab,0.01), digits=2)
color4viab <- setNames(myCol(length(scaleSeq1+1)), nm=scaleSeq1)
} else {
scaleSeq1 <- round(seq(0,1,0.01), digits=2)
color4viab <- setNames(myCol(length(scaleSeq1+1)), nm=scaleSeq1)
}
#change continues measurement to discrete measurement
matValue$Value <- factor(matValue$Value,levels = sort(unique(matValue$Value)))
#change order of heatmap
names(barValue) <-  gsub("con.", "", names(barValue))
matValue$Var <- gsub("con.","",matValue$Var)
matValue$Var <- factor(matValue$Var, levels = names(barValue))
matValue$Sample <- factor(matValue$Sample, levels = names(seaValue))
#plot the heatmap
p1 <- ggplot(matValue, aes(x=Sample, y=Var)) + geom_tile(aes(fill=Value), color = "gray") +
theme_bw() + scale_y_discrete(expand=c(0,0),position = "right") +
theme(axis.text.y=element_text(hjust=0, size=10*scaleFac), axis.text.x=element_blank(),
axis.title = element_blank(),
axis.ticks=element_blank(), panel.border=element_rect(colour="gainsboro"),
plot.title=element_blank(), panel.background=element_blank(),
panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
plot.margin = margin(0,0,0,0)) +
scale_fill_manual(name="Mutated",  values=c(color4viab, `11`="gray96", `12`='black', `21`='lightgreen',
`22`='green',`23` = 'green4'),guide=FALSE) #+ ggtitle(seaName)
#Plot the bar plot on the left of the heatmap
barDF = data.frame(barValue, nm=factor(names(barValue),levels=names(barValue)))
p2 <- ggplot(data=barDF, aes(x=nm, y=barValue)) +
geom_bar(stat="identity", fill=colList[6], colour="black", position = "identity", width=.66, size=0.2) +
theme_bw() + geom_hline(yintercept=0, size=0.3) + scale_x_discrete(expand=c(0,0.5)) +
scale_y_continuous(expand=c(0,0)) + coord_flip() +
theme(panel.grid.major=element_blank(), panel.background=element_blank(), axis.ticks.y = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x =element_text(size=8*scaleFac),
axis.text.y = element_blank(),
axis.title = element_blank(),
panel.border=element_blank(),plot.margin = margin(0,0,0,0))  + geom_vline(xintercept=c(0.5), color="black", size=0.6)
#Plot the scatter plot under the heatmap
# scatterplot below
scatterDF = data.frame(X=factor(names(seaValue), levels=names(seaValue)), Y=seaValue)
p3 <- ggplot(scatterDF, aes(x=X, y=Y)) + geom_point(shape=21, fill="dimgrey", colour="black", size=1.2) +
xlab(paste0(seaName, labSuffix)) + ylab("Z-score") +
theme_bw() +
theme(panel.grid.minor=element_blank(), panel.grid.major.x=element_blank(),
axis.title=element_text(size=10*scaleFac),
axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.text.y=element_text(size=8*scaleFac),
panel.border=element_rect(colour="dimgrey", size=0.1),
panel.background=element_rect(fill="gray96"),plot.margin = margin(0,0,0,0))
dummyGrob <- ggplot() + theme_void()
#Scale bar for continuous variable
if (legend) {
Vgg = ggplot(data=data.frame(x=1, y=as.numeric(names(color4viab))), aes(x=x, y=y, color=y)) + geom_point() +
scale_color_gradientn(name="Z-score", colours =color4viab) +
theme(legend.title=element_text(size=12*scaleFac), legend.text=element_text(size=10*scaleFac))
barLegend <- plot_grid(gtable_filter(ggplotGrob(Vgg), "guide-box"))
#Assemble all the plots togehter
} else {
barLegend <- dummyGrob
}
gt <- egg::ggarrange(p2,p1,barLegend,dummyGrob, p3, dummyGrob, ncol=3, nrow=2,
widths = c(0.6,2,0.3), padding = unit(0,"line"), clip = "off",
heights = c(length(unique(matValue$Var))/2,2),draw = FALSE)
plotList[[seaName]] <- gt
}
return(plotList)
}
heatMaps <- lassoPlot(lassoResults, cleanData, freqCut = 1,setNumber = 1, legend = FALSE, scaleFac = 1)
heatMaps <- heatMaps[!is.na(heatMaps)]
geneLasso <- plot_grid(plotlist=heatMaps, ncol=1)
geneLasso
heatMaps <- lassoPlot(lassoResults, cleanData, freqCut = 1,setNumber = 4, legend = TRUE,  scaleFac = 1)
heatMaps <- heatMaps[!is.na(heatMaps)]
comLasso <- plot_grid(plotlist=heatMaps, ncol=1)
comLasso
inclSet<-list(RNA = rnaMat, Protein = protMat)
cleanData <- generateData(responseList, inclSet, censor = 5)
set.seed(2020)
lassoResults <- list()
for (eachMeasure in names(cleanData$allResponse)) {
dataResult <- list()
for (eachDataset in names(cleanData$allExplain[[eachMeasure]])) {
y <- cleanData$allResponse[[eachMeasure]]
X <- cleanData$allExplain[[eachMeasure]][[eachDataset]]
glmRes <- runGlm(X, y, method = "lasso", repeats = 50, folds = 3)
dataResult[[eachDataset]] <- glmRes
}
lassoResults[[eachMeasure]] <- dataResult
}
varList <- plotVar(lassoResults)
cowplot::plot_grid(plotlist = varList, ncol=1)
heatMaps <- lassoPlot(lassoResults, cleanData, freqCut = 1,setNumber = 3, legend = TRUE,  scaleFac = 1)
heatMaps <- heatMaps[!is.na(heatMaps)]
comLasso <- plot_grid(plotlist=heatMaps, ncol=1)
comLasso
plotTab <- tibble(patID = colnames(protCLL),
STAT2 = assays(protCLL)[["count_combat"]][rowData(protCLL)$hgnc_symbol == "STAT2",],
trisomy12 = protCLL$trisomy12,
IGHV=protCLL$IGHV.status) %>%
filter(!is.na(IGHV), !is.na(trisomy12)) %>%
mutate(trisomy12 = ifelse(trisomy12 == 0, "non-tri12","tri12")) %>%
mutate(group = paste0(IGHV, "_", trisomy12))
stat2BoxProt <- ggplot(plotTab, aes(group, y=STAT2, fill = group)) + geom_boxplot() + geom_point() + theme_full +
scale_fill_manual(values = colList) + theme(legend.position = "none") +
xlab("") + ggtitle("STAT2 protein expression") +ylab("Normalized expression")
summary(lm(STAT2 ~ IGHV * trisomy12, plotTab))
plotTab <- tibble(patID = colnames(ddsSub.vst),
STAT2 = assay(ddsSub.vst)[rowData(ddsSub.vst)$symbol == "STAT2",],
trisomy12 = patMeta[match(patID, patMeta$Patient.ID),]$trisomy12,
IGHV=patMeta[match(patID, patMeta$Patient.ID),]$IGHV.status) %>%
mutate(trisomy12 = ifelse(trisomy12 == 0, "non-tri12","tri12")) %>%
mutate(group = paste0(IGHV, "_", trisomy12))
stat2BoxRNA <- ggplot(plotTab, aes(group, y=STAT2, fill = group)) + geom_boxplot() + geom_point() + theme_full +
scale_fill_manual(values = colList) + theme(legend.position = "none") +
xlab("") + ggtitle("STAT2 RNA expression") +ylab("Normalized expression")
summary(lm(STAT2 ~ IGHV * trisomy12, plotTab))
stat2Box <- plot_grid(stat2BoxProt, stat2BoxRNA)
stat2Box
plotTab <- tibble(patID = colnames(protCLL),
STAT2 = assays(protCLL)[["count_combat"]][rowData(protCLL)$hgnc_symbol == "STAT2",],
trisomy12 = protCLL$trisomy12,
IGHV=protCLL$IGHV.status) %>%
filter(!is.na(IGHV), !is.na(trisomy12)) %>%
mutate(trisomy12 = ifelse(trisomy12 == 0, "non-tri12","tri12")) %>%
mutate(group = paste0(IGHV, "_", trisomy12))
stat2BoxProt <- ggplot(plotTab, aes(group, y=STAT2, fill = group)) + geom_boxplot() + geom_point() + theme_full +
scale_fill_manual(values = colList) + theme(legend.position = "none") +
xlab("") + ggtitle("STAT2 protein expression") +ylab("Normalized expression")
summary(lm(STAT2 ~ IGHV * trisomy12, plotTab))
plotTab <- tibble(patID = colnames(ddsSub.vst),
STAT2 = assay(ddsSub.vst)[rowData(ddsSub.vst)$symbol == "STAT2",],
trisomy12 = patMeta[match(patID, patMeta$Patient.ID),]$trisomy12,
IGHV=patMeta[match(patID, patMeta$Patient.ID),]$IGHV.status) %>%
mutate(trisomy12 = ifelse(trisomy12 == 0, "non-tri12","tri12")) %>%
mutate(group = paste0(IGHV, "_", trisomy12))
stat2BoxRNA <- ggplot(plotTab, aes(group, y=STAT2, fill = group)) + geom_boxplot() + geom_point() + theme_full +
scale_fill_manual(values = colList) + theme(legend.position = "none") +
xlab("") + ggtitle("STAT2 RNA expression") +ylab("Normalized expression")
summary(lm(STAT2 ~ IGHV * trisomy12, plotTab))
expVar <- "STAT2"
protMat <- assays(protCLL)[["QRILC_combat"]]
rownames(protMat) <- rowData(protCLL)$hgnc_symbol
yVec <- protMat[expVar,]
#subset
ddsSub <- dds[,dds$PatID %in% names(yVec)]
#only keep protein coding genes with symbol
ddsSub <- ddsSub[rowData(ddsSub)$biotype %in% "protein_coding" & !rowData(ddsSub)$symbol %in% c("",NA),]
#remove lowly expressed genes
ddsSub <- ddsSub[rowSums(counts(ddsSub, normalized = TRUE)) > 100,]
#voom transformation
exprMat <- limma::voom(counts(ddsSub), lib.size = ddsSub$sizeFactor)$E
ddsSub.voom <- ddsSub
assay(ddsSub.voom) <- exprMat
rnaMat <- exprMat
rownames(rnaMat) <- rowData(ddsSub.voom)$symbol
overSampe <- intersect(names(yVec), colnames(rnaMat))
rnaMat <- rnaMat[,overSampe]
yVec <- yVec[overSampe]
#buid design matirx
ighv <- patMeta[match(names(yVec),patMeta$Patient.ID),]$IGHV.status
tri12 <- patMeta[match(names(yVec),patMeta$Patient.ID),]$trisomy12
d0 <- model.matrix(~yVec)
d1 <- model.matrix(~ighv+tri12+yVec)
fit <- lmFit(rnaMat, design = d0)
fit2 <- eBayes(fit)
resTab.noBlock <- topTable(fit2, number = Inf, coef = "yVec") %>% data.frame() %>% rownames_to_column("name")
hist(resTab.noBlock$P.Value)
resTab.noBlock.sig <- filter(resTab.noBlock, adj.P.Val < 0.1)
resTab.noBlock %>% mutate_if(is.numeric, formatC, digits=2, format="e") %>% DT::datatable()
fit <- lmFit(rnaMat, design = d0)
fit2 <- eBayes(fit)
resTab.noBlock <- topTable(fit2, number = Inf, coef = "yVec") %>% data.frame() %>% rownames_to_column("name")
#hist(resTab.noBlock$P.Value)
resTab.noBlock.sig <- filter(resTab.noBlock, adj.P.Val < 0.1)
plotCorScatter <- function(plotTab, x_lab = "X", y_lab = "Y", title = "",
showR2 = FALSE, annoPos = "right",
dotCol = colList, textCol="darkred") {
#prepare annotation values
corRes <- cor.test(plotTab$x, plotTab$y)
pval <- formatNum(corRes$p.value, digits = 1, format = "e")
Rval <- formatNum(corRes$estimate, digits = 1, format = "e")
R2val <- formatNum(corRes$estimate^2, digits = 1, format = "e")
Nval <- nrow(plotTab)
annoP <- bquote(italic("P")~"="~.(pval))
if (showR2) {
annoCoef <-  bquote(R^2~"="~.(R2val))
} else {
annoCoef <- bquote(R~"="~.(Rval))
}
annoN <- bquote(N~"="~.(Nval))
corPlot <- ggplot(plotTab, aes(x = x, y = y)) + geom_point(aes(col = trisomy12, shape = IGHV), size=5) +
scale_shape_manual(values = c(M = 19, U = 1)) +
scale_color_manual(values = c(yes = colList[2], no = colList[3])) +
geom_smooth(formula = y~x,method = "lm", se=FALSE, color = "grey50", linetype ="dashed" )
if (annoPos == "right") {
corPlot <- corPlot + annotate("text", x = max(plotTab$x), y = Inf, label = annoN,
hjust=1, vjust =2, size = 5, parse = FALSE, col= textCol) +
annotate("text", x = max(plotTab$x), y = Inf, label = annoP,
hjust=1, vjust =4, size = 5, parse = FALSE, col= textCol) +
annotate("text", x = max(plotTab$x), y = Inf, label = annoCoef,
hjust=1, vjust =6, size = 5, parse = FALSE, col= textCol)
} else if (annoPos== "left") {
corPlot <- corPlot + annotate("text", x = min(plotTab$x), y = Inf, label = annoN,
hjust=0, vjust =2, size = 5, parse = FALSE, col= textCol) +
annotate("text", x = min(plotTab$x), y = Inf, label = annoP,
hjust=0, vjust =4, size = 5, parse = FALSE, col= textCol) +
annotate("text", x = min(plotTab$x), y = Inf, label = annoCoef,
hjust=0, vjust =6, size = 5, parse = FALSE, col= textCol)
}
corPlot <- corPlot + ylab(y_lab) + xlab(x_lab) + ggtitle(title) +
scale_y_continuous(labels = scales::number_format(accuracy = 0.1)) +
scale_x_continuous(labels = scales::number_format(accuracy = 0.1)) +
theme_full + theme(legend.position = "bottom", plot.margin = margin(12,12,12,12))
corPlot
}
geneList <- c("OAS2", "IFI44")
rnaSTAT2cor <- lapply(geneList, function(n) {
plotTab <- tibble(x = yVec, y = rnaMat[n,], IGHV = ighv, tri12 = tri12) %>%
mutate(trisomy12 = ifelse(tri12==1,"yes","no"))
plotCorScatter(plotTab, annoPos = "left", x_lab = "STAT2 protein expression", y_lab = sprintf("%s RNA expression", n))
})
names(rnaSTAT2cor) <- geneList
plotRNAcor <- plot_grid(plotlist = rnaSTAT2cor)
plotRNAcor
geneList <- c("OAS2", "IFI44")
rnaSTAT2corBox <- lapply(geneList, function(n) {
plotTab <- tibble(expr = rnaMat[n,], IGHV = ighv, tri12 = tri12) %>%
mutate(trisomy12 = ifelse(tri12==1,"tri12","non-tri12")) %>%
mutate(group = paste0(IGHV, "_", trisomy12))
ggplot(plotTab, aes(group, y=expr, fill = group)) + geom_boxplot() + geom_point() + theme_full +
scale_fill_manual(values = colList) + theme(legend.position = "none") +
xlab("") + ylab(sprintf("%s RNA expression",n)) + ggtitle(n)
})
names(rnaSTAT2corBox) <- geneList
plotRNAbox <- plot_grid(plotlist = rnaSTAT2corBox)
plotRNAbox
gmts <- list(H = "../data/gmts/h.all.v6.2.symbols.gmt",
KEGG = "../data/gmts/c2.cp.kegg.v6.2.symbols.gmt")
enRes <-  runCamera(rnaMat, d0, gmts$H,
removePrefix = "HALLMARK_", pCut = 0.1, ifFDR = TRUE, setMap=setMap)
enRes$enrichPlot
colAnno <- tibble(id = names(yVec),  STAT2= yVec, IGHV = ighv, trisomy12 = tri12) %>%
mutate(trisomy12 = ifelse(trisomy12 ==1,"yes","no")) %>%
data.frame() %>% column_to_rownames("id")
annoCol <- list(trisomy12 = c(yes = "black",no = "grey80"),
IGHV = c(M = colList[4], U = colList[3]),
STAT2 = circlize::colorRamp2(c(min(colAnno$STAT2),max(colAnno$STAT2)),
c("white", "green")))
nameList <- c("STAT2","IFI44","OAS1","OAS2", "IFI30")
plotSetHeatmap(resTab.noBlock.sig, gmts$H, "HALLMARK_INTERFERON_ALPHA_RESPONSE", rnaMat, colAnno = colAnno, annoCol = annoCol, highLight = nameList)
plotSetHeatmap(resTab.noBlock.sig, gmts$H, "HALLMARK_INTERFERON_GAMMA_RESPONSE", rnaMat, colAnno = colAnno, annoCol = annoCol,highLight = nameList)
colAnno <- tibble(id = names(yVec),  STAT2= yVec, IGHV = ighv, trisomy12 = tri12) %>%
mutate(trisomy12 = ifelse(trisomy12 ==1,"yes","no")) %>%
data.frame() %>% column_to_rownames("id")
annoCol <- list(trisomy12 = c(yes = "black",no = "grey80"),
IGHV = c(M = colList[4], U = colList[3]),
STAT2 = circlize::colorRamp2(c(min(colAnno$STAT2),max(colAnno$STAT2)),
c("white", "green")))
nameList <- c("STAT2","IFI44","OAS1","OAS2", "IFI30")
plotSetHeatmap(resTab.noBlock.sig, gmts$H, "HALLMARK_INTERFERON_ALPHA_RESPONSE", rnaMat, colAnno = colAnno, annoCol = annoCol, highLight = nameList)
fit <- lmFit(rnaMat, design = d1)
fit2 <- eBayes(fit)
resTab.block <- topTable(fit2, number = Inf, coef = "yVec") %>% data.frame() %>% rownames_to_column("name")
hist(resTab.block$P.Value)
resTab.block.sig <- filter(resTab.block, P.Value < 0.01)
enRes <-  runCamera(rnaMat, d1, gmts$H, contrast  = "yVec",
removePrefix = "HALLMARK_", pCut = 0.05, ifFDR = TRUE, plotTitle = "RNA enrichment", setMap = setMap)
rnaEnrich <- enRes$enrichPlot
rnaEnrich
expVar <- "STAT2"
protMat <- assays(protCLL)[["QRILC_combat"]]
rownames(protMat) <- rowData(protCLL)$hgnc_symbol
yVec <- protMat[expVar,]
protMat <- protMat[rownames(protMat) != expVar,]
expVar <- "STAT2"
protMat <- assays(protCLL)[["QRILC_combat"]]
rownames(protMat) <- rowData(protCLL)$hgnc_symbol
yVec <- protMat[expVar,]
protMat <- protMat[rownames(protMat) != expVar,]
#buid design matirx
ighv <- patMeta[match(names(yVec),patMeta$Patient.ID),]$IGHV.status
tri12 <- patMeta[match(names(yVec),patMeta$Patient.ID),]$trisomy12
d0 <- model.matrix(~yVec)
d1 <- model.matrix(~ighv+tri12+yVec)
fit <- lmFit(protMat, design = d0)
fit2 <- eBayes(fit)
resTab.noBlock <- topTable(fit2, number = Inf, coef = "yVec") %>% data.frame() %>% mutate(name = ID)
hist(resTab.noBlock$P.Value)
resTab.noBlock.sig <- filter(resTab.noBlock, adj.P.Val < 0.1)
resTab.noBlock %>% mutate_if(is.numeric, formatC, digits=2, format="e") %>% DT::datatable()
geneList <- c("OAS1", "OAS2", "IFI30" )
geneList <- c("OAS2")
protSTAT2cor <- lapply(geneList, function(n) {
plotTab <- tibble(x = yVec, y = protMat[n,], IGHV = ighv, tri12 = tri12) %>%
mutate(trisomy12 = ifelse(tri12==1,"yes","no"))
plotCorScatter(plotTab, annoPos = "left", x_lab = "STAT2 protein expression", y_lab = sprintf("%s protein expression", n))
})
names(protSTAT2cor) <- geneList
plot_grid(plotlist = protSTAT2cor, ncol=1)
protSTAT2corBox <- lapply(geneList, function(n) {
plotTab <- tibble(expr = protMat[n,], IGHV = ighv, tri12 = tri12) %>%
mutate(trisomy12 = ifelse(tri12==1,"tri12","non-tri12")) %>%
filter(!is.na(IGHV), !is.na(trisomy12)) %>%
mutate(group = paste0(IGHV, "_", trisomy12))
ggplot(plotTab, aes(group, y=expr, fill = group)) + geom_boxplot() + geom_point() + theme_full +
scale_fill_manual(values = colList) + theme(legend.position = "none") +
xlab("") + ylab(sprintf("%s protein expression",n)) + ggtitle(n)
})
names(protSTAT2corBox) <- geneList
plot_grid(plotlist = protSTAT2corBox, ncol=3)
enRes <-  runCamera(protMat, d0, gmts$H,
removePrefix = "HALLMARK_", pCut = 0.1, ifFDR = TRUE, setMap = setMap)
enRes$enrichPlot
tab1 <- readxl::read_xlsx("../data/CAS9results.xlsx", sheet = 1) %>% mutate(control = "ACTB")
tab2 <- readxl::read_xlsx("../data/CAS9results.xlsx", sheet = 2) %>% mutate(control = "GAPDH")
pcrTab <- bind_rows(tab1, tab2) %>% separate(name, into = c("cellLine","sgRNA","treatment","IFN"), sep = "[_ ]", remove = FALSE) %>%
pivot_longer(contains("fold change"), names_to = "replicate",values_to = "foldChange") %>%
mutate(replicate=str_replace(replicate, "fold change replicate ","R"),
IFN = ifelse(treatment == "+", "IFN", "no IFN"),
trisomy12 = ifelse(cellLine %in% c("MEC-1","HG-3"), "no" ,"yes"),
sgTreat= paste0(sgRNA," ",treatment," IFN")) %>%
select(-treatment) %>%
mutate(sgRNA = factor(sgRNA, levels = c("NTC","34A","36D")),
Gene = factor(Gene, levels = c("STAT2","OAS1","OAS2"))) %>%
arrange(sgRNA, Gene) %>%
mutate(sgTreat = factor(sgTreat, levels = unique(sgTreat))) %>%
mutate(log2foldChange = log2(foldChange))
geneSymbol <- c(bquote(italic("STAT2")),bquote(italic("OAS1")), bquote(italic("OAS2")))
plotTab <- pcrTab %>% filter(control == "GAPDH")
barGAPDH <- ggplot(plotTab, aes(x=sgTreat, y=log2foldChange)) +
geom_bar(aes(fill = Gene), position = "dodge", stat = "summary", fun.y = "mean") +
geom_point(aes(dodge=Gene), col = "black", position = position_dodge(width = 0.9)) +
scale_fill_manual(values = colList, labels = geneSymbol) +
facet_wrap(~cellLine, scale = "free_x", ncol=2 ) +
xlab("") + ylab(bquote("log"[2]*"(fold change) relative to control in RNA expression")) +
#scale_y_continuous() +
geom_hline(yintercept = 0, linetype = "dashed", col = "grey50") +
theme_half +
theme(axis.text.x = element_text(angle = 90, hjust=1, vjust=0.5),
strip.text = element_text(size=12, face= "bold"),
legend.position = "right")
barGAPDH
plotTab <- pcrTab %>% filter(control == "ACTB")
barACTB <- ggplot(plotTab, aes(x=sgTreat, y=log2foldChange)) +
geom_bar(aes(fill = Gene), position = "dodge", stat = "summary", fun.y = "mean") +
geom_point(aes(dodge=Gene), col = "black", position = position_dodge(width = 0.9)) +
scale_fill_manual(values = colList, labels = geneSymbol) +
facet_wrap(~cellLine, scale = "free_x", ncol=2) +
xlab("") + ylab(bquote("log"[2]*"(fold change) relative to control in RNA expression")) +
#scale_y_continuous() +
geom_hline(yintercept = 0, linetype = "dashed", col = "grey50") +
theme_half +
theme(axis.text.x = element_text(angle = 90, hjust=1, vjust=0.5),
strip.text = element_text(size=12, face= "bold"),
legend.position = "right")
barACTB
pcrTab <- readxl::read_excel("../data/STATexprPCR.xlsx") %>%
separate(name, into = c("cellLine", "sgRNA","IFN","other"),sep = " ") %>%
#mutate(IFN = ifelse(IFN == "+","with ","no ")) %>%
mutate(IFN = paste0(IFN, " ",other),
trisomy12 = str_replace(trisomy12, "Non","non")) %>%
arrange( trisomy12, IFN) %>%
mutate(group = paste0(trisomy12," ", IFN)) %>%
mutate(group =factor(group, levels=unique(group)),
sgRNA = factor(sgRNA, levels = c("NTC","34A","36D")),
Gene = factor(Gene, levels = c("STAT2","OAS1","OAS2"))) %>%
group_by(cellLine, sgRNA, group, Gene) %>%
summarise(fc = mean(foldChange)) %>%
ungroup()
geneSymbol <- c(bquote(italic("STAT2")),bquote(italic("OAS1")), bquote(italic("OAS2")))
meanTab <- group_by(pcrTab, group, sgRNA, Gene) %>%
summarise(meanVal = mean(fc))
ggplot(pcrTab, aes(x=group, y = fc, col = Gene, group = Gene)) +
geom_point(aes(shape = cellLine),position = position_dodge(width = 0.8), size=3) +
xlab("") + ylab("fold change") +
#ggrepel::geom_text_repel(aes(label = cellLine)) +
scale_color_manual(values = colList, labels = geneSymbol, name = "gene") +
scale_shape_discrete(name = "cell line") +
geom_point(data=meanTab, aes(x=group, y=meanVal), position = position_dodge(width = 0.8), color= "grey50", shape = "—", size=6) +
#scale_y_continuous(limits = c(-3,6)) +
#ggtitle(sprintf("%s expression (%s)", geneName, condi)) +
facet_wrap(~sgRNA, ncol=3, scale = "free_x") +
theme_full + theme(legend.position = "right",
plot.title = element_text(face = "bold"),
strip.text = element_text(size=12),
axis.text.x = element_text(angle = 45, hjust=1, vjust=1))
#ggsave("STAT2_expr_tri12.pdf", height = 5, width = 11)
geneSymbol <- c(bquote(italic("STAT2")),bquote(italic("OAS1")), bquote(italic("OAS2")))
meanTab <- group_by(pcrTab, group, sgRNA, Gene) %>%
summarise(meanVal = mean(fc))
ggplot(pcrTab, aes(x=group, y = fc, col = Gene, group = Gene)) +
geom_point(aes(shape = cellLine),position = position_dodge(width = 0.8), size=3) +
xlab("") + ylab(bquote("log"[2]*"(fold change)")) +
#ggrepel::geom_text_repel(aes(label = cellLine)) +
scale_color_manual(values = colList, labels = geneSymbol, name = "gene") +
scale_shape_discrete(name = "cell line") +
#geom_point(data=meanTab, aes(x=group, y=meanVal), position = position_dodge(width = 0.8), color= "grey50", shape = "—", size=6) +
#scale_y_continuous(limits = c(-3,6)) +
#ggtitle(sprintf("%s expression (%s)", geneName, condi)) +
facet_wrap(~sgRNA, ncol=3, scale = "free_x") +
theme_full + theme(legend.position = "right",
plot.title = element_text(face = "bold"),
strip.text = element_text(size=12),
axis.text.x = element_text(angle = 45, hjust=1, vjust=1))
#ggsave("STAT2_expr_tri12_noMean.pdf", height = 5, width = 11)
